const { MessageEmbed } = require('discord.js');
const { QueryType } = require('discord-player');

module.exports = {
    name: 'search',
    aliases: ['sh','tim','timkiem'],
    category: 'Nh·∫°c',
    utilisation: '{prefix}search [song name]',
    usage: '%search [t√™n b√†i h√°t]',
    descriptions: 'Ph√°t nh·∫°c theo danh s√°ch t√¨m ki·∫øm',
    voiceChannel: true,

    async run(client, message, args) {
        if (!args[0]) return message.reply(`Vui l√≤ng nh·∫≠p t√™n b√†i h√°t c·∫ßn t√¨m ki·∫øm üîé`);

        const res = await client.player.search(args.join(' '), {
            requestedBy: message.member,
            searchEngine: QueryType.AUTO
        });

        if (!res || !res.tracks.length) return message.reply(`Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ v·ªÅ b√†i h√°t!`);

        const queue = await client.player.createQueue(message.guild, {
            metadata: message.channel
        });

        const embed = new MessageEmbed();

        embed.setColor('GREEN');
        embed.setAuthor(`K·∫øt qu·∫£ ${args.join(' ')}`, client.user.displayAvatarURL({ size: 1024, dynamic: true }));

        const maxTracks = res.tracks.slice(0, 10);

        embed.setDescription(`${maxTracks.map((track, i) => `**${i + 1}**. ${track.title} | ${track.author}`).join('\n')}\n\nCh·ªçn l·ª±a ch·ªçn t·ª´ **1** ƒë·∫øn **${maxTracks.length}** ho·∫∑c **cancel** ‚¨áÔ∏è`);

        embed.setTimestamp();
        embed.setFooter('Bot: Bao-Chan Bot by PinkDuwc._', message.author.avatarURL({ dynamic: true }));

        message.channel.send({ embeds: [embed] });

        const collector = message.channel.createMessageCollector({
            time: 15000,
            errors: ['time'],
            filter: m => m.author.id === message.author.id
        });

        collector.on('collect', async (query) => {
            if (query.content.toLowerCase() === 'cancel') return message.channel.send(`ƒê√£ h·ªßy t√¨m ki·∫øm ‚úÖ`) && collector.stop();

            const value = parseInt(query.content);

            if (!value || value <= 0 || value > maxTracks.length) return message.channel.send(`Gi√° tr·ªã kh√¥ng h·ª£p l√Ω, th·ª≠ l·∫°i v·ªõi gi√° tr·ªã t·ª´ **1** ƒë·∫øn **${maxTracks.length}** or **cancel**... th·ª≠ l·∫°i ? ‚ùå`);

            collector.stop();

            try {
                if (!queue.connection) await queue.connect(message.member.voice.channel);
            } catch {
                await player.deleteQueue(message.guild.id);
                return message.reply(`Bao-Chan Bot kh√¥ng v√†o ƒë∆∞·ª£c k√™nh tho·∫°i c·ªßa b·∫°n, vui l√≤ng th·ª≠ l·∫°i!`);
            }

            await message.reply(`ƒê·ª£i t·ªõ t√≠ t·ªõ ƒëang t√¨m ki·∫øm... üîé`);

            queue.addTrack(res.tracks[query.content - 1]);

            if (!queue.playing) await queue.play();
        });

        collector.on('end', (msg, reason) => {
            if (reason === 'time') return message.reply(`H·∫øt th·ªùi gian ch·ªçn k·∫øt qu·∫£ t√¨m ki·∫øm ...`);
        });
    },
};